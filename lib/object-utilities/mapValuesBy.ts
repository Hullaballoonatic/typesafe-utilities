/**
 * Creates an object with the same keys as `object` and values generated by running each own enumerable string keyed property of `object` through `transform`.
 * @example
 * const users = {
 *     fred: { user: 'fred', age: 40 },
 *     pebbles: { user: 'pebbles', age: 1 },
 * };
 *
 * mapValuesBy(users, (user: User) => user.age);
 * // => { fred: 40, pebbles: 1 }
 *
 * // The `_.property` iteratee shorthand.
 * mapValuesBy(users, 'age');
 * // => { fred: 40, pebbles: 1 }
 */
export default function mapValuesBy<K extends symbol, V, R>(object: Record<K, V>, transform: keyof V | ((value: V, index?: number) => R)): Record<K, R> {
    const getValue = transform instanceof Function ? transform : (value: V) => value[transform as keyof V] as unknown as R;

    const result = {} as Record<K, R>;

    Object.entries(object).forEach(([key, value], i) => {
        result[key as unknown as K] = getValue(value as V, i);
    });

    return result;
}